const express = require("express");
const http = require("http");
const path = require("path");
const { Client, Collection,WebhookClient, Intents } = require('discord.js');
const client = global.client = new Client({	allowedMentions: { parse: ['users', 'roles'], repliedUser: true },
  intents: [Intents.FLAGS.GUILDS, Intents.FLAGS.GUILD_PRESENCES, Intents.FLAGS.GUILD_MESSAGES, Intents.FLAGS.GUILD_MEMBERS]
 
});   
const Discord = require('discord.js');

const db = require("quick.db");
var app = module.exports = express();
const serverd = app.listen();

app.use(express.static(path.join(__dirname, "./public")));
//app.all('*', ensureSecure); // at top of routing calls

/*function ensureSecure(req, res, next){
  if(req.secure){
    // OK, continue
    return next();
  };
  // handle port numbers if you need non defaults
  // res.redirect('https://' + req.host + req.url); // express 3.x
  res.redirect('https://' + req.hostname + req.url); // express 4.x
}
app.get("/", (req, res) => { res.sendFile(path.join(__dirname, "index.html")) });*/

const WebSocket = require("ws");
const SocketServer = require("ws").Server;
var crypto = require('crypto');
const server = express().listen();
const fs = require("fs");
const wss = new SocketServer({ server: true });

var authedvbert = 0;
function tencrypt_ag(strin)
{
var asdsadasdasd = "";
var sdfdsfdsfsddsf = strin;
var buffer = new Buffer(sdfdsfdsfsddsf, 'utf16le');
for (var i = 0; i < buffer.length; i++) {
  if(buffer[i] > 0)
  {
    asdsadasdasd += "pr"+buffer[i]*21323213123;
  }
}
var base64data1 = Buffer.from(asdsadasdasd).toString('base64');
  //var encryptedPlainText = aesEcb.encrypt("92345478901234517890123556789242", base64data1);

var base64data2 = Buffer.from(base64data1).toString('base64');
/*var asdasdsafasfas = "";
var sfsdfdsgfdsgdfh = base64data2;
var buffer = new Buffer(sfsdfdsgfdsgdfh, 'utf16le');
for (var i = 0; i < buffer.length; i++) {
  if(buffer[i] > 0)
  {
    asdasdsafasfas += "\\"+buffer[i]*23999992;
  }
}*/
var base64data3 = Buffer.from(base64data2).toString('base64');
var asfdsafdsfdsfsddfs = "";
var fdsfsdgfdfsgdf = base64data3;
var buffer = new Buffer(fdsfsdgfdfsgdf, 'utf16le');
for (var i = 0; i < buffer.length; i++) {
  if(buffer[i] > 0)
  {
    asfdsafdsfdsfsddfs += "\\"+String.fromCharCode(buffer[i]);
  }
}
var asddsffdhhgjjhkjhk = "";
var stfdfsdfdsr = asfdsafdsfdsfsddfs;
var buffer = new Buffer(stfdfsdfdsr, 'utf16le');
for (var i = 0; i < buffer.length; i++) {
  if(buffer[i] > 0)
  {
    asddsffdhhgjjhkjhk += "\\"+buffer[i];
  }
}
var base64data4 = Buffer.from(asddsffdhhgjjhkjhk).toString('base64');
var fdsfsdfdsf = "";
var fdsfsdfdsfds = base64data4;
var buffer = new Buffer(fdsfsdfdsfds, 'utf16le');
for (var i = 0; i < buffer.length; i++) {
  if(buffer[i] > 0)
  {
    fdsfsdfdsf += "\\"+String.fromCharCode(buffer[i]);
   // console.log(String.fromCharCode(buffer[i]))
  }
}
return ".:/TuaxaEncoder\\:."+fdsfsdfdsf;

}

function tedcrypt_ag(strin)
{
  var replaced = strin.replace(".:/TuaxaEncoder\\:.", '');
  var adsdsds = replaced.split("\\")
  var replacedv2 = "";
  for (var i = 0; i < adsdsds.length; i++) {
    replacedv2 += adsdsds[i].replace("\\","");
  }
  var decryptedv1 = Buffer.from(replacedv2, 'base64').toString('ascii')
  var adsdsdsasdsadasd = decryptedv1.split("\\")
  var replasdasdacedv2 = "";
  for (var i = 0; i < adsdsdsasdsadasd.length; i++) {
    replasdasdacedv2 += String.fromCharCode(adsdsdsasdsadasd[i].replace("\\",""));
  }
  var adafdsfdsf = replasdasdacedv2.split("\\")
  var fdsfsdfsdfsd = "";
  for (var i = 0; i < adafdsfdsf.length; i++) {
    fdsfsdfsdfsd +=  adafdsfdsf[i].replace("\\","");
  }
  var decryptedv2 = Buffer.from(fdsfsdfsdfsd, 'base64').toString('ascii')
  /*var fdasfsdfdas = decryptedv2.split("\\")
  var jhgjkugbdfg = "";
  for (var i = 0; i < fdasfsdfdas.length; i++) {
    jhgjkugbdfg += String.fromCharCode(fdasfsdfdas[i]/23999992);
  }*/
  var decryptedv3 = Buffer.from(decryptedv2, 'base64').toString('ascii')
  var decryptedv4 = Buffer.from(decryptedv3, 'base64').toString('ascii')
  var asdasdsadas = decryptedv4.split("pr")
  var fdgdfgdf = "";
  for (var i = 0; i < asdasdsadas.length; i++) {
    fdgdfgdf += String.fromCharCode(asdasdsadas[i]/21323213123);
  }
  return fdgdfgdf;
}

function gencrypt(strin)
{
var asdsadasdasd = "";
var sdfdsfdsfsddsf = strin;
var buffer = new Buffer(sdfdsfdsfsddsf, 'utf16le');
for (var i = 0; i < buffer.length; i++) {
  if(buffer[i] > 0)
  {
    asdsadasdasd += "pr"+buffer[i]*22344369;
  }
}
var base64data1 = Buffer.from(asdsadasdasd).toString('base64');
var fdsfsdfdsf = "";
var fdsfsdfdsfds = base64data1;
var buffer = new Buffer(fdsfsdfdsfds, 'utf16le');
for (var i = 0; i < buffer.length; i++) {
  if(buffer[i] > 0)
  {
    fdsfsdfdsf += "\\"+String.fromCharCode(buffer[i]);
   // console.log(String.fromCharCode(buffer[i]))
  }
}
return ".:/TuaxaEncoder\\:."+fdsfsdfdsf;

}

function gedcrypt(strin)
{
  var replaced = strin.replace(".:/TuaxaEncoder\\:.", '');
  var adsdsds = replaced.split("\\")
  var replacedv2 = "";
  for (var i = 0; i < adsdsds.length; i++) {
    replacedv2 += adsdsds[i].replace("\\","");
  }
  var decryptedv1 = Buffer.from(replacedv2, 'base64').toString('ascii')
  var asdasdsadas = decryptedv1.split("pr")
  var fdgdfgdf = "";
  for (var i = 0; i < asdasdsadas.length; i++) {
    fdgdfgdf += String.fromCharCode(asdasdsadas[i]/22344369);
  }
  return fdgdfgdf;
}

function sencrypt(strin)
{
var asdsadasdasd = "";
var sdfdsfdsfsddsf = strin;
var buffer = new Buffer(sdfdsfdsfsddsf, 'utf16le');
for (var i = 0; i < buffer.length; i++) {
  if(buffer[i] > 0)
  {
    asdsadasdasd += "pr"+buffer[i]*23030303;
  }
}
var base64data1 = Buffer.from(asdsadasdasd).toString('base64');
  //var encryptedPlainText = aesEcb.encrypt("92345478901234517890123556789242", base64data1);

var base64data2 = Buffer.from(base64data1).toString('base64');
var asdasdsafasfas = "";
var sfsdfdsgfdsgdfh = base64data2;
var buffer = new Buffer(sfsdfdsgfdsgdfh, 'utf16le');
for (var i = 0; i < buffer.length; i++) {
  if(buffer[i] > 0)
  {
    asdasdsafasfas += "\\"+buffer[i]*45677;
  }
}
var base64data3 = Buffer.from(asdasdsafasfas).toString('base64');
var asfdsafdsfdsfsddfs = "";
var fdsfsdgfdfsgdf = base64data3;
var buffer = new Buffer(fdsfsdgfdfsgdf, 'utf16le');
for (var i = 0; i < buffer.length; i++) {
  if(buffer[i] > 0)
  {
    asfdsafdsfdsfsddfs += "\\"+String.fromCharCode(buffer[i]);
  }
}
var asddsffdhhgjjhkjhk = "";
var stfdfsdfdsr = asfdsafdsfdsfsddfs;
var buffer = new Buffer(stfdfsdfdsr, 'utf16le');
for (var i = 0; i < buffer.length; i++) {
  if(buffer[i] > 0)
  {
    asddsffdhhgjjhkjhk += "\\"+buffer[i];
  }
}
var base64data4 = Buffer.from(asddsffdhhgjjhkjhk).toString('base64');
var fdsfsdfdsf = "";
var fdsfsdfdsfds = base64data4;
var buffer = new Buffer(fdsfsdfdsfds, 'utf16le');
for (var i = 0; i < buffer.length; i++) {
  if(buffer[i] > 0)
  {
    fdsfsdfdsf += "\\"+String.fromCharCode(buffer[i]);
   // console.log(String.fromCharCode(buffer[i]))
  }
}
return ".:TAUT:."+fdsfsdfdsf;

}

function sdecrypt(strin)
{
  var replaced = strin.replace(".:TAUT:.", '');
  var adsdsds = replaced.split("\\")
  var replacedv2 = "";
  for (var i = 0; i < adsdsds.length; i++) {
    replacedv2 += adsdsds[i].replace("\\","");
  }
  var decryptedv1 = Buffer.from(replacedv2, 'base64').toString('ascii')
  var adsdsdsasdsadasd = decryptedv1.split("\\")
  var replasdasdacedv2 = "";
  for (var i = 0; i < adsdsdsasdsadasd.length; i++) {
    replasdasdacedv2 += String.fromCharCode(adsdsdsasdsadasd[i].replace("\\",""));
  }
  var adafdsfdsf = replasdasdacedv2.split("\\")
  var fdsfsdfsdfsd = "";
  for (var i = 0; i < adafdsfdsf.length; i++) {
    fdsfsdfsdfsd +=  adafdsfdsf[i].replace("\\","");
  }
  var decryptedv2 = Buffer.from(fdsfsdfsdfsd, 'base64').toString('ascii')
  var fdasfsdfdas = decryptedv2.split("\\")
  var jhgjkugbdfg = "";
  for (var i = 0; i < fdasfsdfdas.length; i++) {
    jhgjkugbdfg += String.fromCharCode(fdasfsdfdas[i]/45677);
  }
  var decryptedv3 = Buffer.from(jhgjkugbdfg, 'base64').toString('ascii')
  var decryptedv4 = Buffer.from(decryptedv3, 'base64').toString('ascii')
  var asdasdsadas = decryptedv4.split("pr")
  var fdgdfgdf = "";
  for (var i = 0; i < asdasdsadas.length; i++) {
    fdgdfgdf += String.fromCharCode(asdasdsadas[i]/23030303);
  }
  return fdgdfgdf;
}

//const  url = require('url');

wss.on('connection',(ws,req)=>{
  /*const location = url.parse(req.url, true);
  console.log(location.pathname);
  if(location.pathname != "/auth")
  {
    console.log("Closing Client Because Not Requesting Auth.")
    ws.close();
return;
  }*/
   console.log('A Client Connected!')
   const superagent = require("snekfetch");

       superagent
         .get("https://piroves.gq/omg/wsetauth.php")
         .query({ omg: "selamgirlssw9oÄ±ree2jr54yh234yg32yu74g3u24gu23g4yuh43yuyug324ghyu32gyhu4h32yu4h23",del: "0"})
         .end((err, response) => {
          if (response.body.lenght === 0) {
          }
          else if (!response.body.includes("yes"))
          {//authedvbert
            const webhookClient = new WebhookClient({ url : "https://ptb.discord.com/api/webhooks/1010795222155919421/HHUt0P6HhLvOtkeU04JuKLjNe9-VFUPIa7QvANQpIjZslzOn_A7NpyrvWYMHuPNG29LV" });

            /* const embed = new MessageEmbed()
                 .setTitle('New Message').addField("Shard Number : ",shard.id + " Aviable",false)
                 .setColor('#0099ff');*/
            const monstsdsad = new Discord.MessageEmbed().setAuthor("Wanda Fan Hd","").setTitle(`Error On Auth Value`).setDescription("Hey Yo Tuaxa Im Have Error!")

             webhookws.send({
               username: 'Veso Auth Lux Error',
                 avatarURL: 'https://cdn.discordapp.com/attachments/970366656809414766/1010624004211625994/1649799073232.jpg',
                 //embeds: [embed],
                 embeds:[monstsdsad],
             });
          }
          else
          {

          }

         });
   ws.on('close',()=>{
       console.log('A Client Connection Closed!')
       const superagent = require("snekfetch");

       superagent
         .get("https://piroves.gq/omg/wsetauth.php")
         .query({ omg: "selamgirlssw9oÄ±ree2jr54yh234yg32yu74g3u24gu23g4yuh43yuyug324ghyu32gyhu4h32yu4h23",del: "1"})
         .end((err, response) => {
          if (response.body.lenght === 0) {
          }
          else if (!response.body.includes("yes"))
          {//authedvbert
            const webhookClient = new WebhookClient({ url : "https://ptb.discord.com/api/webhooks/1010795222155919421/HHUt0P6HhLvOtkeU04JuKLjNe9-VFUPIa7QvANQpIjZslzOn_A7NpyrvWYMHuPNG29LV" });

            /* const embed = new MessageEmbed()
                 .setTitle('New Message').addField("Shard Number : ",shard.id + " Aviable",false)
                 .setColor('#0099ff');*/
            const monstsdsad = new Discord.MessageEmbed().setAuthor("Wanda Fan Hd","").setTitle(`Error On Auth Value`).setDescription("Hey Yo Tuaxa Im Have Error!")

             webhookws.send({
               username: 'Veso Auth Lux Error',
                 avatarURL: 'https://cdn.discordapp.com/attachments/970366656809414766/1010624004211625994/1649799073232.jpg',
                 //embeds: [embed],
                 embeds:[monstsdsad],
             });
          }
          else
          {

          }

         });
   });
   ws.on('message',(message)=>{
    (async () => {
      ws.send("as")
var msgdftgf = gedcrypt(message.toString());
console.log(msgdftgf);
if (msgdftgf.includes("AUTH/*/"))
{
var ip = "";
var hwid = "";
var key = "";
var fdasfsdfdas = gedcrypt(message.toString()).replace("AUTH/*/","").split("|")

//console.log(gedcrypt(message.toString()).toString())
for (var i = 0; i < fdasfsdfdas.length; i++) {
if (i == 1) 
{
    ip = fdasfsdfdas[i];
}
else if (i == 2)
{
    hwid = fdasfsdfdas[i];
}
else if (i == 3)
{
    key = fdasfsdfdas[i];
}
}

const superagent = require("snekfetch");

                            superagent
                              .get("https://piroves.gq/omg/wauth.php")
                              .query({ omg: "selamgirlssw9oÄ±ree2jr54yh234yg32yu74g3u24gu23g4yuh43yuyug324ghyu32gyhu4h32yu4h23",keyz: key,hwid: hwid,ip: ip })
                              .end((err, response) => {

                                if (response.body.lenght === 0) {
                                
                                  if(client.readyState===WebSocket.OPEN){
                                    ws.send(gencrypt(""+key+"|"+hwid+"|"+"failed1"));
                                  }
                              
                                }
                                else if (response.body =="Auth Fail")
                                {
                                  if(client.readyState===WebSocket.OPEN){
                                    ws.send(gencrypt(""+key+"|"+hwid+"|"+"failed2"));
                                  }
                                                                
                                }
                                else if (response.body =="NewUser")
                                {
                                if(hwid.length != 0 && ip.length !=0)
                                {
                                
                            superagent
                              .get("https://piroves.gq/omg/whip.php")
                              .query({ omg: "selamgirlssw9oÄ±ree2jr54yh234yg32yu74g3u24gu23g4yuh43yuyug324ghyu32gyhu4h32yu4h23",keyz: key,hwid: hwid,ip: ip })
                              .end((err, response) => {
                                if (response.body.lenght != 0) {
                                if(response.body == "yessss")
                                {
                                    superagent
                                    .get("https://piroves.gq/omg/wauth.php")
                                    .query({ omg: "selamgirlssw9oÄ±ree2jr54yh234yg32yu74g3u24gu23g4yuh43yuyug324ghyu32gyhu4h32yu4h23",keyz: key,hwid: hwid,ip: ip })
                                    .end((err, response) => {
                                      if (response.body.lenght === 0) {
                                        if(client.readyState===WebSocket.OPEN){
                                            ws.send(gencrypt(""+key+"|"+hwid+"|"+"failed1"));
                                        }
                                       
                                      }
                                      else if (response.body =="Auth Fail")
                                      {
                                        if(client.readyState===WebSocket.OPEN){
                                            ws.send(gencrypt(""+key+"|"+hwid+"|"+"failed2"));
                                        }
                                                                      
                                      }
                                      else
                                      {
                                            if(client.readyState===WebSocket.OPEN){
                                                ws.send(gencrypt(""+key+"|"+hwid+"|"+response.body));
                                            }
                                          
                                      }
                                        
                                    });
                                }
                                }
                                });
                                }

                            }
                            else
                            {
                              
                                const webhookClient = new WebhookClient({ url : "https://discord.com/api/webhooks/1010622482174197832/X0IGnbMdu-4icU6xqpXlx0oy1JAXl-jhUfjnYLFeIsmrIxFoxJCbawLxQSctpE4jZEfQ" });

                                /* const embed = new MessageEmbed()
                                     .setTitle('New Message').addField("Shard Number : ",shard.id + " Aviable",false)
                                     .setColor('#0099ff');*/
                                const monstsdsad = new Discord.MessageEmbed().setAuthor("Usman ÅentÃ¼rk","").setTitle(`A User Authed.`).setDescription("Key : "+key+"\n ip : bak bak alÄ±rsÄ±n")

                                 webhookws.send({
                                   username: 'Veso Lux Auth Log',
                                     avatarURL: 'https://cdn.discordapp.com/attachments/970366656809414766/1010624004211625994/1649799073232.jpg',
                                     //embeds: [embed],
                                     embeds:[monstsdsad],
                                 });
                              if(client.readyState===WebSocket.OPEN){
                                  ws.send(gencrypt(""+key+"|"+hwid+"|"+response.body));
                              }
                            
                            }
                        });



}else{}
//var msgdf = gedcrypt(message.toString());
//if (msgdf.includes("AUTH/*/") && msgdf.length > 0 && msgdf.replace("|"+msgdf,"") == "1")
//{
//  var ip = "";
//  var hwid = "";
//  var key = "";
//  var fdasfsdfdas = gedcrypt(message.toString()).replace("AUTH/*/","").split("|")
  
/*  console.log("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
  for (var i = 0; i < fdasfsdfdas.length; i++) {
  if (i == 1) 
  {
      ip = fdasfsdfdas[i];
  }
  else if (i == 2)
  {
      hwid = fdasfsdfdas[i];
  }
  else if (i == 3)
  {
      key = fdasfsdfdas[i];
  }
}

const superagent = require("snekfetch");

                            superagent
                              .get("https://piroves.gq/omg/wauth.php")
                              .query({ omg: "selamgirlssw9oÄ±ree2jr54yh234yg32yu74g3u24gu23g4yuh43yuyug324ghyu32gyhu4h32yu4h23",keyz: key,hwid: hwid,ip: ip })
                              .end((err, response) => {

                                if (response.body.lenght === 0) {
                                  if(client.readyState===WebSocket.OPEN){
                                    ws.send(gencrypt(""+key+"|"+hwid+"|"+"failed1"));
                                  }
                                
                                }
                                else if (response.body =="Auth Fail")
                                {
                                  if(client.readyState===WebSocket.OPEN){
                                    ws.send(gencrypt(""+key+"|"+hwid+"|"+"failed2"));
                                  }
                                                               
                                }
                                else if (response.body =="NewUser")
                                {
                                if(hwid.length != 0 && ip.length !=0)
                                {
                                
                            superagent
                              .get("https://piroves.gq/omg/whip.php")
                              .query({ omg: "selamgirlssw9oÄ±ree2jr54yh234yg32yu74g3u24gu23g4yuh43yuyug324ghyu32gyhu4h32yu4h23",keyz: key,hwid: hwid,ip: ip })
                              .end((err, response) => {
                                if (response.body.lenght != 0) {
                                if(response.body == "yessss")
                                {
                                    superagent
                                    .get("https://piroves.gq/omg/wauth.php")
                                    .query({ omg: "selamgirlssw9oÄ±ree2jr54yh234yg32yu74g3u24gu23g4yuh43yuyug324ghyu32gyhu4h32yu4h23",keyz: key,hwid: hwid,ip: ip })
                                    .end((err, response) => {
                                      if (response.body.lenght === 0) {
                                        if(client.readyState===WebSocket.OPEN){
                                            ws.send(gencrypt(""+key+"|"+hwid+"|"+"failed1"));
                                        }
                                      
                                      }
                                      else if (response.body =="Auth Fail")
                                      {
                                        if(client.readyState===WebSocket.OPEN){
                                            ws.send(gencrypt(""+key+"|"+hwid+"|"+"failed2"));
                                        }
                                                                     
                                      }
                                      else
                                      {
                                            if(client.readyState===WebSocket.OPEN){
                                                ws.send(gencrypt(""+key+"|"+hwid+"|"+response.body));
                                            }
                                        
                                      }
                                        
                                    });
                                }
                                }
                                });
                                }

                            }
                            else
                            {
                              
                                const webhookClient = new WebhookClient({ url : "https://discord.com/api/webhooks/1010622482174197832/X0IGnbMdu-4icU6xqpXlx0oy1JAXl-jhUfjnYLFeIsmrIxFoxJCbawLxQSctpE4jZEfQ" });
                                const monstsdsad = new Discord.MessageEmbed().setAuthor("Usman ÅentÃ¼rk","").setTitle(`A User Authed.`).setDescription("Key : "+key+"\n ip : bak bak alÄ±rsÄ±n")

                                 webhookws.send({
                                   username: 'Veso Lux Auth Log',
                                     avatarURL: 'https://cdn.discordapp.com/attachments/970366656809414766/1010624004211625994/1649799073232.jpg',
                                     //embeds: [embed],
                                     embeds:[monstsdsad],
                                 });
                              if(client.readyState===WebSocket.OPEN){
                                  ws.send(gencrypt(""+key+"|"+hwid+"|"+response.body));
                              }
                          
                            
                            }
                        });



}else{}*/


})();
   });
});




 
function makeidZZZ(length) {
    var result           = '';
    var characters       = 'ABCDEFGHIJKLMNOP';
    var charactersLength = characters.length;
    for ( var i = 0; i < length; i++ ) {
      result += characters.charAt(Math.floor(Math.random() * 
 charactersLength));
   }
   return result;
}

client.login("MTAxMDU0NjgwMDc3Nzc3NzI3Nw.G_Jjfb.7Yqn-VT62n1d9oaEyrVSkFj2Teprwz1fo0DPEc")
client.on("message", async message => {


  

  let command = message.content.split(" ")[0]
  let params = message.content.split(" ").slice(0);
if (command == "v!addUser")
{
if (message.author.id == "962716499452243968")
{}else{return message.channel.send("UnAuthrized Acces. GO Cri");}
var idds = false;
var id;    
if(params[1] != null && !params[1].includes("@"))
 {
 //let thanos = await client.users.fetch(params[1]);
 await client.users.fetch(params[1]).then(function(result1) {
 id = result1;
 });
 }
 else if(params[1] != null && params[1].includes("@"))
 {
 id = await message.mentions.members.first().user;
 }
 else
 {
 idds = true;
 }
if(!idds)
{
var user = params[1]
var ad = params[3]
var typez = params[2]
var typnm = ""
if(typez == 0)
{
typnm = "Nub";
}
else if(typez == 1)
{
typnm = "Normal";
}
else if(typez == 2)
{
typnm = "Premium";
}
else if(typez == 3)
{
typnm = "Developer";
}

var msg = await message.channel.send("Processing...")
if (id.id == null && id.id.lenght <= 0)
{
return msg.edit({content:"Error During Fetching Discord id."})
}
const superagent = require("snekfetch");

                            superagent
                              .get("https://piroves.gq/omg/wcrt.php")
                              .query({ omg: "selamgirlssw9oÄ±ree2jr54yh234yg32yu74g3u24gu23g4yuh43yuyug324ghyu32gyhu4h32yu4h23",uname: ad,type: typez,disid : id.id})
                              .end((err, response) => {
                                if (response.body.lenght === 0) {
                                msg.edit({content:"Failed Because : Server Returned Null Please Contact Tuaxa#9999"});
                                }
                                if (response.body =="Username Taken Or Empty")
                                {
                                return msg.edit({content:"Failed Because : Username Taken Or Empty"});
                                }
                                else if (response.body == "Discord Id Taken Or Empty") {
                                return msg.edit({content:"Failed Because : Same Discord Id Found On Database"});
                                }
                                else
                                {
                                console.log(response.body.toString());
                                msg.edit({content:"Key : `"+response.body+"`"+"\nType : "+typnm});
                                }
                              });
}
else
{
return message.channel.send(db.get("872535206303780916_key"));
}
}
});

client.on('ready', () => {
client.user.setStatus('dnd');
  client.user.setPresence({ activities: [{ type: "LISTENING",name: "Veso Lux Auth Bot" }]})
  client.user.setStatus(Discord)

});


